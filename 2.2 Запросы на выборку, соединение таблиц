/*Задание
Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.
*/
SELECT title, name_genre, price
FROM 
book INNER JOIN genre
ON book.genre_id=genre.genre_id
WHERE amount>8
ORDER BY price DESC;

/*Задание
Вывести все жанры, которые не представлены в книгах на складе.
*/

SELECT name_genre
FROM genre LEFT JOIN book
--USING (genre_id)
ON genre.genre_id=book.genre_id
WHERE title IS NULL;

/*Задание
Есть список городов, хранящийся в таблице city:

city_id	name_city
1	Москва
2	Санкт-Петербург
3	Владивосток
Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.
*/
SELECT name_city, name_author, DATE_ADD('2020-01-01', INTERVAL (RAND() * 365) DAY) AS Дата
FROM city, author
ORDER BY name_city, Дата DESC;

/*Если хотите, чтобы RAND  каждый раз выдавал вам одну и ту же последовательность, необходимо инициализировать генератор через так называемый seed.
А именно - использовать некоторое число внутри RAND() - например RAND(42).

Это можно оформить через отдельную переменную - например @seed - и затем использовать ее. Однако, оценщик платформы не засчитывает такую реализацию, поэтому в выложенном решении я закомментировал переменную и использовал хардкод.
SET @seed = 42; -- инициализируем переменную seed

SELECT name_city, 
       name_author, 
       DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND(42) * 365) DAY) as Дата -- применяем: @seed вместо 42
FROM author CROSS JOIN city
ORDER BY name_city, Дата DESC;
*/

/*Задание
 Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.*/
SELECT name_genre, title, name_author
FROM genre
INNER JOIN book ON genre.genre_id=book.genre_id
INNER JOIN author ON book.author_id=author.author_id
WHERE name_genre='Роман'
ORDER BY title;

/*Многие условие добавили в WHERE, но с точки зрения скорости лучше уже на шаге FROM в первом JOIN отрезать лишние данные, поскольку при больших таблицах операция JOIN весьма тежеловесна.*/
SELECT name_genre, title, name_author
  FROM genre g
       INNER JOIN book b
       ON g.genre_id = b.genre_id
          AND g.name_genre LIKE '%_оман%'
       INNER JOIN author USING(author_id)
 ORDER BY title;

 SELECT name_genre,
       title,
       name_author
  FROM (SELECT *
          FROM genre
         WHERE name_genre = 'Роман') AS genre
       JOIN book USING(genre_id)
       JOIN author USING(author_id)
 ORDER BY title ASC;
 --с помощью AS genre создается временная таблица,  на основе выборки из запроса (который в скобках перед AS --genre)

 /*Задание
Посчитать количество экземпляров  книг каждого автора из таблицы author.  Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде. Последний столбец назвать Количество.*/
SELECT name_author, SUM(amount) AS Количество
FROM author
LEFT JOIN book ON author.author_id=book.author_id
GROUP BY name_author
HAVING SUM(amount)<10 OR SUM(amount)IS NULL
ORDER BY Количество;

/* Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. Поскольку у нас в таблицах так занесены данные, что у каждого автора книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. Пусть у нас  книга Есенина «Черный человек» относится к жанру «Роман», а книга Булгакова «Белая гвардия» к «Приключениям» (эти изменения в таблицы уже внесены) */

SELECT name_author
FROM author INNER JOIN (
    SELECT author_id
    FROM book
    INNER JOIN genre
    USING (genre_id)
    GROUP BY author_id
    HAVING COUNT(DISTINCT name_genre)=1
    ) query_in 
USING(author_id)
ORDER BY name_author;

--другие решения
SELECT name_author FROM author 
WHERE author_id IN(SELECT DISTINCT author_id FROM book
                    GROUP BY author_id
                    HAVING COUNT(DISTINCT genre_id) = 1)

                    SELECT name_author FROM
author INNER JOIN book 
ON author.author_id = book.author_id
GROUP BY name_author
HAVING count(DISTINCT genre_id) = 1;

SELECT name_author
FROM author JOIN (SELECT author_id, COUNT(DISTINCT genre_id) AS genre_count
                  FROM book
                  GROUP BY author_id) query_in
     ON author.author_id = query_in.author_id
WHERE query_in.genre_count = 1;

SELECT name_author
FROM book
JOIN author ON book.author_id = author.author_id 
JOIN genre ON book.genre_id = genre.genre_id
GROUP BY name_author
HAVING COUNT(DISTINCT name_genre) = 1;

/*Задание
Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество экземпляров книги), написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг виде. Самым популярным считать жанр, общее количество экземпляров книг которого на складе максимально. */


SELECT title, name_author, name_genre, price, amount
FROM book INNER JOIN author USING (author_id)
INNER JOIN genre USING (genre_id)
GROUP BY title, name_author, name_genre, price, amount, genre.genre_id
HAVING genre.genre_id IN 
(
SELECT query_in2.genre_id
FROM
(
    SELECT genre_id, SUM(amount) AS sum_amount
    FROM book
    GROUP BY genre_id
    ) query_in2
INNER JOIN
(
    SELECT genre_id, SUM(amount) AS sum_amount
FROM book
GROUP BY genre_id
ORDER BY SUM(amount) DESC
LIMIT 1
    ) query_in1
USING(sum_amount)
)
ORDER BY title

/*А вот и оконные функции подъехали с WITH (или CTE - Common Table Expression). 
Код благодаря им становится более читабельным и менее емким.

Совет, когда их нужно применять:
Если задача требует группировку и вывод полной инф-ы этих сгруппирированных данных, то смело применяйте их.

Когда научитесь хоть немного применять оконные функции, то советую вернуться сюда и переписать запрос. */
with n as (select *, sum(amount) over(partition by genre_id) as summ
from book
)
select title, a.name_author, g.name_genre, price, amount
from n 
    inner join genre as g on n.genre_id = g.genre_id
    inner join author as a on n.author_id = a.author_id
where summ = (select max(summ) from n)
order by title

/*Задание
Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора, а также посчитать общее количество экземпляров книг в таблицах supply и book,  столбцы назвать Название, Автор  и Количество.*/
SELECT book.title AS Название, author.name_author AS Автор, (supply.amount+book.amount) AS Количество
FROM author RIGHT JOIN book USING(author_id)
LEFT JOIN supply ON supply.title = book.title AND supply.author = author.name_author AND supply.price=book.price
HAVING Количество IS NOT NULL

--Comments
select book.title as Название, name_author as Автор, book.amount + supply.amount as Количество
from book
    inner join author using(author_id)
    inner join supply 
    on (book.title, author.name_author, book.price) = (supply.title, supply.author, supply.price)


/*Для каждого автора из таблицы author вывести количество книг, написанных им в каждом жанре.
Вывод: ФИО автора, жанр, количество. Отсортировать по фамилии, затем - по убыванию количества написанных книг.
*/

SELECT author.name_author, genre.name_genre, COUNT(book.title) AS Количество
FROM author
CROSS JOIN genre
LEFT JOIN book ON author.author_id=book.author_id AND genre.genre_id=book.genre_id
GROUP BY author.name_author, genre.name_genre
ORDER BY name_author, COUNT(book.title) DESC

/*
...
FROM author CROSS JOIN genre --все верно, далее к этим двум таблицам добавляем третью:
            LEFT JOIN book ON ... AND ... -- группируем по двум полям - автору и жанру
                                          -- LEFT JOIN, потому что мы хотим оставить авторов и жанры
                                          -- даже если не найдется книг какого-то автора какого-то 
                                          -- жанра
GROUP BY... -- все же правильным будет группировать по тем столбцам, что вы выводите в СЕЛЕКТ - имя 
            -- автора и название жанр
SORT BY... -- имя автора, количество убывающее, жанр

*/
